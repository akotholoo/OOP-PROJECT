#include <iostream>
#include <vector>
#include <string>
#include <fstream>

using namespace std;

class Book {
public:
    int bookID;
    string title;
    string author;
    string genre;
    bool isAvailable;

    Book(int id, string t, string a, string g) {
        bookID = id;
        title = t;
        author = a;
        genre = g;
        isAvailable = true;
    }
};

class Member {
public:
    int memberID;
    string name;
    string address;
    string phoneNumber;

    Member(int id, string n, string a, string p) {
        memberID = id;
        name = n;
        address = a;
        phoneNumber = p;
    }
};

class Transaction {
public:
    int transactionID;
    int memberID;
    int bookID;
    string borrowDate;
    string returnDate;

    Transaction(int tid, int mid, int bid, string bd) {
        transactionID = tid;
        memberID = mid;
        bookID = bid;
        borrowDate = bd;
        returnDate = "";
    }
};

// Function to add a book
void addBook(vector<Book>& books) {
    int id;
    string title, author, genre;
    cout << "Enter book ID: ";
    cin >> id;
    cout << "Enter book title: ";
    cin.ignore();
    getline(cin, title);
    cout << "Enter author name: ";
    getline(cin, author);
    cout << "Enter genre: ";
    getline(cin, genre);
    books.push_back(Book(id, title, author, genre));
    cout << "Book added successfully!" << endl;
}

// Function to add a member
void addMember(vector<Member>& members) {
    int id;
    string name, address, phone;
    cout << "Enter member ID: ";
    cin >> id;
    cout << "Enter member name: ";
    cin.ignore();
    getline(cin, name);
    cout << "Enter member address: ";
    getline(cin, address);
    cout << "Enter member phone number: ";
    getline(cin, phone);
    members.push_back(Member(id, name, address, phone));
    cout << "Member added successfully!" << endl;
}

// Function to borrow a book
void borrowBook(vector<Book>& books, vector<Member>& members, vector<Transaction>& transactions) {
    int bookID, memberID;
    cout << "Enter book ID to borrow: ";
    cin >> bookID;
    cout << "Enter member ID: ";
    cin >> memberID;

    // Find the book and member
    Book* book = nullptr;
    Member* member = nullptr;
    for (Book& b : books) {
        if (b.bookID == bookID) {
            book = &b;
            break;
        }
    }
    for (Member& m : members) {
        if (m.memberID == memberID) {
            member = &m;
            break;
        }
    }

    if (book && member && book->isAvailable) {
        book->isAvailable = false;
        time_t now = time(0);
        char* dt = ctime(&now);
        transactions.push_back(Transaction(transactions.size() + 1, memberID, bookID, dt));
        cout << "Book borrowed successfully!" << endl;
    } else {
        cout << "Book not available or member not found." << endl;
    }
}

// Function to return a book
void returnBook(vector<Book>& books, vector<Transaction>& transactions) {
    int transactionID;
    cout << "Enter transaction ID to return: ";
    cin >> transactionID;

    for (Transaction& t : transactions) {
        if (t.transactionID == transactionID) {
            for (Book& b : books) {
                if (b.bookID == t.bookID) {
                    b.isAvailable = true;
                    t.returnDate = ctime(time(0));
                    cout << "Book returned successfully!" << endl;
                    return;
                }
            }
        }
    }
    cout << "Transaction not found or book not returned." << endl;
}

// Function to search for a book by title
void searchBookByTitle(const vector<Book>& books) {
    string title;
    cout << "Enter book title to search: ";
    cin.ignore();
    getline(cin, title);

    bool found = false;
    for (const Book& book : books) {
        if (book.title == title) {
            cout << "Book found:\n";
            cout << "ID: " << book.bookID << endl;
            cout << "Title: " << book.title << endl;
            cout << "Author: " << book.author << endl;
            cout << "Genre: " << book.genre << endl;
            cout << "Availability: " << (book.isAvailable ? "Available" : "Borrowed") << endl;
            found = true;
        }
    }

    if (!found) {
        cout << "Book not found." << endl;
    }
}

// ... similar functions for searching members, generating reports, etc.

int main() {
    vector<Book> books;
    vector<Member> members;
    vector<Transaction> transactions;

    // ... code for menu-driven interface and function calls

    return 0;
}
